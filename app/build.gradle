apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jetbrains.dokka-android'
// apply plugin: 'jacoco-android'
apply plugin: "jacoco"


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "net.noworks.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        develop {
            storeFile file("../key/develop.jks")
            storePassword "password"
            keyAlias "develop"
            keyPassword "password"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.develop
        }
        release {
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt' // NOTE: commons 関連の jar で「duplicate files during packaging of APK」のエラーが出るため記述
        exclude 'META-INF/NOTICE.txt' // NOTE: commons 関連の jar で「duplicate files during packaging of APK」のエラーが出るため記述
    }
    testOptions {
        // NOTE FragmentUtilsTest のテスト実行時に Method getInstrumentation in android.test.InstrumentationTestCase not mocked という
        // NOTE エラーが出てしまうので追加
        // NOTE (See https://sites.google.com/a/android.com/tools/tech-docs/unit-testing-support for details)
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = "0.8.2"
}
// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                            '**/BuildConfig.class', '**/*Activity*.class',
                            '**/*Fragment*.class', '**/*Receiver.class',
                            '**/*Manifest*.class', '**/*Application*.class']
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/jacoco/html"
        classDirectories = files(
                fileTree(
                        dir: "${buildDir}/intermediates/classes/uiTest/debug",
                        exclude: coverageExcludeFiles))
    }
    sourceDirectories = files(coverageSourceDirs)
    executionData = files "${buildDir}/jacoco/testUiTestDebugUnitTest.exec"

    doLast {
        println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/jacocoTestReport.xml"
        println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
    }
}

dokka{
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    skipEmptyPackages = true
    skipDeprecated = false
    noStdlibLink = false
}

// task jacocoTestReport(type: JacocoReport) {
//     reports {
//         xml.enabled = true
//         html.enabled = true
//     }

//     def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
//                         '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
//     def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
//     def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
//     def mainSrc = "$project.projectDir/src/main/java"

//     sourceDirectories = files([mainSrc])
//     classDirectories = files([kotlinDebugTree, javaDebugTree])
//     executionData = fileTree(dir: project.buildDir, includes: [
//             'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
//     ])
// }

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.platform:junit-platform-runner:1.3.1'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testImplementation("org.jetbrains.spek:spek-api:$spek_version")
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// project.afterEvaluate {
//     android.applicationVariants.all { variant ->
//         def realVariantName = variant.name
//         def variantName = variant.name.capitalize()

//         def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
//         def defaultExcludes = task.classDirectories.excludes

//         def excludes = defaultExcludes

//         def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: excludes)

//         task.classDirectories.excludes = excludes
//         task.classDirectories += kotlinDebugTree
//     }
// }