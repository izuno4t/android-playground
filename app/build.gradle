apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'jacoco-android'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "net.noworks.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        develop {
            storeFile file("../key/develop.jks")
            storePassword "password"
            keyAlias "develop"
            keyPassword "password"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.develop
        }
        release {
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt' // NOTE: commons 関連の jar で「duplicate files during packaging of APK」のエラーが出るため記述
        exclude 'META-INF/NOTICE.txt' // NOTE: commons 関連の jar で「duplicate files during packaging of APK」のエラーが出るため記述
    }
    testOptions {
        // NOTE FragmentUtilsTest のテスト実行時に Method getInstrumentation in android.test.InstrumentationTestCase not mocked という
        // NOTE エラーが出てしまうので追加
        // NOTE (See https://sites.google.com/a/android.com/tools/tech-docs/unit-testing-support for details)
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dokka{
    outputFormat = 'javadoc'
    // sourceDirs = files('src/main/java')
    outputDirectory = "$buildDir/javadoc"
    skipEmptyPackages = true
    skipDeprecated = false
    noStdlibLink = false
}

task dokkaJavaDoc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask, overwrite: true) {
    moduleName = "$rootProject.name"
    outputFormat = "javadoc"
    sourceDirs = files('src/main/java')
    skipEmptyPackages = true
    skipDeprecated = false
    noStdlibLink = false
}

jacocoAndroidUnitTestReport {
  csv.enabled false
  html.enabled true
  xml.enabled true
  excludes += ['**/AutoValue_*.*',
              '**/*JavascriptBridge.class']
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'org.junit.platform:junit-platform-runner:1.3.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    
    // spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    // spek requires kotlin-reflect, omit when already in classpath
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def realVariantName = variant.name
        def variantName = variant.name.capitalize()

        def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
        def defaultExcludes = task.classDirectories.excludes

        def excludes = defaultExcludes

        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: excludes)

        task.classDirectories.excludes = excludes
        task.classDirectories += kotlinDebugTree
    }
}