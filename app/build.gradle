apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'jacoco-android'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "net.noworks.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [applicationLabel:"遊び場"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        develop {
            storeFile file("../key/develop.jks")
            storePassword "password"
            keyAlias "develop"
            keyPassword "password"
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [applicationLabel: "遊び場(debug)"]
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.develop
        }
        release {
            manifestPlaceholders = [applicationLabel:"遊び場(release)"]
            minifyEnabled false
            versionNameSuffix '-RELEASE'
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    packagingOptions {
        // NOTE: commons 関連の jar で「duplicate files during packaging of APK」のエラーが出るため記述
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    testOptions {
        // NOTE FragmentUtilsTest のテスト実行時に Method getInstrumentation in android.test.InstrumentationTestCase not mocked という
        // NOTE エラーが出てしまうので追加
        // NOTE (See https://sites.google.com/a/android.com/tools/tech-docs/unit-testing-support for details)
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            def versionName = variant.versionName
            def date = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date())
            def newName = "${rootProject.name}_v${versionName}_${date}.apk"
            outputFileName = newName
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    skipEmptyPackages = true
    skipDeprecated = false
    noStdlibLink = false
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.platform:junit-platform-runner:1.3.1'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testImplementation("org.jetbrains.spek:spek-api:$spek_version")
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def realVariantName = variant.name
        def variantName = variant.name.capitalize()

        def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
        def defaultExcludes = task.classDirectories.excludes

        def excludes = defaultExcludes + ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                                          '**/BuildConfig.class', '**/*Activity*.class', '**/DataBinder*.class',
                                          '**/*Fragment*.class', '**/*Receiver.class', '**/*Manifest*.class',
                                          '**/*Application*.class', 'android/**/*.*', '**/*$[0-9].*']

        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: excludes)

        task.classDirectories.excludes = excludes
        task.classDirectories += kotlinDebugTree
    }
}